import Head from "next/head";
import Link from "next/link";
import { useState } from "react";
import { set } from "zod";
import { Button } from "~/components/ui/button";
import { api } from "~/utils/api";
import { ChatClient } from "~/components/ChatClient";

const languages = [
  { name: "spanish", flag: "ES", available: true },
  { name: "italian", flag: "IT", available: false },
  { name: "arabic", flag: "SA", available: false },
  { name: "french", flag: "FR", available: false },
  { name: "german", flag: "DE", available: false },
  { name: "urdu", flag: "PK", available: false },
];

const scenarios = [
  { name: "in a cafe", emoji: "â˜•", available: true },
  { name: "train station", emoji: "ðŸš‰", available: false },
  { name: "grocery shop", emoji: "ðŸ›’", available: false },
  { name: "meeting a friend", emoji: "ðŸ‘¥", available: false },
];

export default function Home() {
  //const hello = api.example.hello.useQuery({ text: "from tRPC" });
  //const [language, setLanguage] = useState("");
  const [selectedScenario, setSelectedScenario] = useState("");
  const [selectedLanguage, setSelectedLanguage] = useState("");
  const [hasConversationStarted, setHasConversationStarted] = useState(false);

  const handleEndConversation = () => {
    setSelectedLanguage("");
    setSelectedScenario("");
    setHasConversationStarted(false);
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-slate-200">
        {!hasConversationStarted && (
          <>
            <h1>Select Language and Scenario</h1>
            <div className="flex flex-wrap justify-center">
              {languages.map((language) => (
                <div
                  key={language.name}
                  className={`m-4 border-2 p-4 ${
                    selectedLanguage === language.name
                      ? "border-blue-500"
                      : "border-gray-300"
                  } cursor-pointer rounded-lg`}
                  onClick={() => selectedLanguage===language.name ?setSelectedLanguage("") : setSelectedLanguage(language.name)}
                >
                  {/* {language.flag} */}
                  <p>
                    {language.name}
                    {!language.available && " (Coming soon)"}
                  </p>
                </div>
              ))}
            </div>

            <div className="flex flex-wrap justify-center">
              {scenarios.map((scenario) => (
                <div
                  key={scenario.name}
                  className={`m-4 border-2 p-4 ${
                    selectedScenario === scenario.name
                      ? "border-blue-500"
                      : "border-gray-300"
                  } cursor-pointer rounded-lg`}
                  onClick={() => selectedScenario===scenario.name ? setSelectedScenario("") : setSelectedScenario(scenario.name)}
                >
                  {scenario.emoji}
                  <p>
                    {scenario.name}
                    {!scenario.available && " (Coming soon)"}
                  </p>
                </div>
              ))}
            </div>

            {selectedLanguage && selectedScenario && (
              <Button onClick={() => setHasConversationStarted(true)}>
                Begin Conversation
              </Button>
            )}
          </>
        )}

        {hasConversationStarted && (
          <div className="flex flex-col items-center justify-center">
            <h1>Conversation</h1>



            <ChatClient language={selectedLanguage} scenario={selectedScenario} /> 

            <Button onClick={handleEndConversation}>Start a new conversation</Button>
          </div>
        )}
      </main>
    </>
  );
}
